{
  "datetime": {
    "prefix": "datetime",
    "body": "datetime"
  },
  "color": {
    "prefix": "color",
    "body": "color"
  },
  "ulong": {
    "prefix": "ulong",
    "body": "ulong"
  },
  "ushort": {
    "prefix": "ushort",
    "body": "ushort"
  },
  "uchar": {
    "prefix": "uchar",
    "body": "uchar"
  },
  "uint": {
    "prefix": "uint",
    "body": "uint"
  },
  "string": {
    "prefix": "string",
    "body": "string"
  },
  "NULL": {
    "prefix": "NULL",
    "body": "NULL"
  },
  "include": {
    "prefix": "include",
    "body": "#include <${1:file_name.mqh}>$0",
    "description": "preprocessor include directive"
  },
  "dynamic_cast": {
    "prefix": "dynamic_cast",
    "body": "dynamic_cast<${1:type-id}>(${2:expression})$0",
    "description": [
      "Dynamic typecasting is performed using dynamic_cast operator that can be applied only to pointers to classes.",
      "Type validation is performed at runtime. This means that the compiler does not check the data type applied for typecasting when dynamic_cast operator is used.",
      "If a pointer is converted to a data type which is not the actual type of an object, the result is NULL."
    ]
  },
  "ENUM_TIMEFRAMES": {
    "prefix": "ENUM_TIMEFRAMES",
    "body": "ENUM_TIMEFRAMES",
    "description": "Timeframe enum"
  },
  "PERIOD_M1": {
    "prefix": "PERIOD_M1",
    "body": "PERIOD_M1"
  },
  "PERIOD_M5": {
    "prefix": "PERIOD_M5",
    "body": "PERIOD_M5"
  },
  "PERIOD_M15": {
    "prefix": "PERIOD_M15",
    "body": "PERIOD_M15"
  },
  "PERIOD_M30": {
    "prefix": "PERIOD_M30",
    "body": "PERIOD_M30"
  },
  "PERIOD_H1": {
    "prefix": "PERIOD_H1",
    "body": "PERIOD_H1"
  },
  "PERIOD_H4": {
    "prefix": "PERIOD_H4",
    "body": "PERIOD_H4"
  },
  "PERIOD_D1": {
    "prefix": "PERIOD_D1",
    "body": "PERIOD_D1"
  },
  "PERIOD_W1": {
    "prefix": "PERIOD_W1",
    "body": "PERIOD_W1"
  },
  "PERIOD_MN1": {
    "prefix": "PERIOD_MN1",
    "body": "PERIOD_MN1"
  },
  "OP_BUY": {
    "prefix": "OP_BUY",
    "body": "OP_BUY"
  },
  "OP_BUYLIMIT": {
    "prefix": "OP_BUYLIMIT",
    "body": "OP_BUYLIMIT"
  },
  "OP_BUYSTOP": {
    "prefix": "OP_BUYSTOP",
    "body": "OP_BUYSTOP"
  },
  "OP_SELL": {
    "prefix": "OP_SELL",
    "body": "OP_SELL"
  },
  "OP_SELLLIMIT": {
    "prefix": "OP_SELLLIMIT",
    "body": "OP_SELLLIMIT"
  },
  "OP_SELLSTOP": {
    "prefix": "OP_SELLSTOP",
    "body": "OP_SELLSTOP"
  },
  "ENUM_MA_METHOD": {
    "prefix": "ENUM_MA_METHOD",
    "body": "ENUM_TIMEFRAMES",
    "description": "Timeframe enum"
  },
  "MODE_SMA": {
    "prefix": "MODE_SMA",
    "body": "MODE_SMA",
    "description": "Simple averaging"
  },
  "MODE_EMA": {
    "prefix": "MODE_EMA",
    "body": "MODE_EMA",
    "description": "Exponential averaging"
  },
  "MODE_SMMA": {
    "prefix": "MODE_SMMA",
    "body": "MODE_SMMA",
    "description": "Smoothed averaging"
  },
  "MODE_LWMA": {
    "prefix": "MODE_LWMA",
    "body": "MODE_LWMA",
    "description": "Linear-weighted averaging"
  },
  "ENUM_APPLIED_PRICE": {
    "prefix": "ENUM_APPLIED_PRICE",
    "body": "ENUM_APPLIED_PRICE",
    "description": "Applied price enum"
  },
  "PRICE_CLOSE": {
    "prefix": "PRICE_CLOSE",
    "body": "PRICE_CLOSE"
  },
  "PRICE_OPEN": {
    "prefix": "PRICE_OPEN",
    "body": "PRICE_OPEN"
  },
  "PRICE_HIGH": {
    "prefix": "PRICE_HIGH",
    "body": "PRICE_HIGH"
  },
  "PRICE_LOW": {
    "prefix": "PRICE_LOW",
    "body": "PRICE_LOW"
  },
  "PRICE_MEDIAN": {
    "prefix": "PRICE_MEDIAN",
    "body": "PRICE_MEDIAN"
  },
  "PRICE_TYPICAL": {
    "prefix": "PRICE_TYPICAL",
    "body": "PRICE_TYPICAL"
  },
  "PRICE_WEIGHTED": {
    "prefix": "PRICE_WEIGHTED",
    "body": "PRICE_WEIGHTED"
  },
  "MqlDateTime": {
    "prefix": "MqlDateTime",
    "body": "MqlDateTime $0",
    "description": "<struct> structure contains eight fields of the int type"
  },
  "MqlParam": {
    "prefix": "MqlParam",
    "body": "MqlParam $0",
    "description": "<struct> The MqlParam structure has been specially designed to provide input parameters when creating the handle of a technical indicator using the IndicatorCreate() function."
  },
  "MqlRates": {
    "prefix": "MqlRates",
    "body": "MqlRates $0",
    "description": "<struct> structure stores information about the prices, volumes and spread."
  },
  "MqlBookInfo": {
    "prefix": "MqlBookInfo",
    "body": "MqlBookInfo $0",
    "description": "<struct> provides information about the market depth data"
  },
  "MqlTradeRequest": {
    "prefix": "MqlTradeRequest",
    "body": "MqlTradeRequest $0",
    "description": "<struct> Interaction between the client terminal and a trade server for executing the order placing operation is performed by using trade requests. "
  },
  "MqlTradeCheckResult": {
    "prefix": "MqlTradeCheckResult",
    "body": "MqlTradeCheckResult $0",
    "description": "<struct> Before sending a request for a trade operation to a trade server, it is recommended to check it. The check is performed using the OrderCheck() function, to which the checked request and a variable of the MqlTradeCheckResult structure type are passed. The check result will be written to this variable."
  },
  "MqlTradeResult": {
    "prefix": "MqlTradeResult",
    "body": "MqlTradeResult $0",
    "description": "<struct> As result of a trade request, a trade server returns data about the trade request processing result as a special predefined structure of MqlTradeResult type."
  },
  "MqlTick": {
    "prefix": "MqlTick",
    "body": "MqlTick $0",
    "description": "<struct> This is a structure for storing the latest prices of the symbol. It is designed for fast retrieval of the most requested information about current prices."
  },
  "_Symbol": {
    "prefix": "_Symbol",
    "body": "_Symbol",
    "description": "<string> Returns the string value of the current symbol."
  },
  "_Digits": {
    "prefix": "_Digits",
    "body": "_Digits$0",
    "description": "<int> Number of decimal places"
  },
  "_Point": {
    "prefix": "_Point",
    "body": "_Point$0",
    "description": "<double> Size of the current symbol point in the quote currency"
  },
  "_LastError": {
    "prefix": "_LastError",
    "body": "_LastError$0",
    "description": "<int> last error code"
  },
  "_Period": {
    "prefix": "_Period",
    "body": "_Period$0",
    "description": "<ENUM_TIMEFRAMES> value of the timeframe of the current chart."
  },
  "_RandomSeed": {
    "prefix": "_RandomSeed",
    "body": "_RandomSeed$0",
    "description": "<int> Variable for storing the current state when generating pseudo-random integers"
  },
  "_StopFlag": {
    "prefix": "_StopFlag",
    "body": "_StopFlag$0",
    "description": "<bool> contains the flag of the mql5-program stop"
  },
  "_UninitReason": {
    "prefix": "_UninitReason",
    "body": "_UninitReason$0",
    "description": "<int> contains the code of the program uninitialization reason."
  },
  "Bid": {
    "prefix": "Bid",
    "body": "Bid$0",
    "description": "<double> bid"
  },
  "Ask": {
    "prefix": "Ask",
    "body": "Ask$0",
    "description": "<double> ask"
  },
  "Open[]": {
    "prefix": "Open[]",
    "body": "Open[${1:i}]$0",
    "description": "<double> Series array that contains open prices of each bar of the current chart"
  },
  "High[]": {
    "prefix": "High[]",
    "body": "High[${1:i}]$0",
    "description": "<double> Series array that contains high prices of each bar of the current chart"
  },
  "Low[]": {
    "prefix": "Low[]",
    "body": "Low[${1:i}]$0",
    "description": "<double> Series array that contains low prices of each bar of the current chart"
  },
  "Close[]": {
    "prefix": "Close[]",
    "body": "Close[${1:i}]$0",
    "description": "<double> Series array that contains close prices of each bar of the current chart"
  },
  "Time[]": {
    "prefix": "Time[]",
    "body": "Time[${1:i}]$0",
    "description": "<datetime> Series array that contains time of each bar of the current chart"
  },
  "Volume[]": {
    "prefix": "Volume[]",
    "body": "Volume[${1:i}]$0",
    "description": "<long> Series array that contains volume of each bar of the current chart"
  },
  "Alert": {
    "prefix": "Alert",
    "body": "Alert(${1:argument, ...})$0",
    "description": "<void> Displays a message in a separate window."
  },
  "Check Pointer": {
    "prefix": "Check Pointer",
    "body": "CheckPointer(${1:object* anytype})$0",
    "description": "<ENUM_POINTER_TYPE> The function returns the type of the object pointer."
  },
  "Comment": {
    "prefix": "Comment",
    "body": "Comment(${1:argument, ...})$0",
    "description": "<void> outputs a comment defined by a user in the top left corner of a chart."
  },
  "DebugBreak": {
    "prefix": "DebugBreak",
    "body": "DebugBreak()$0",
    "description": "<void> sets a debug break point"
  },
  "ExpertRemove": {
    "prefix": "ExpertRemove",
    "body": "ExpertRemove()$0",
    "description": "<void> stops an Expert Advisor and unloads it from a chart."
  },
  "GetPointer": {
    "prefix": "GetPointer",
    "body": "GetPointer(${1:object anytype})$0",
    "description": "<void*> returns the object pointer."
  },
  "GetTickCount": {
    "prefix": "GetTickCount",
    "body": "GetTickCount()$0",
    "description": "<uint> returns the number of milliseconds that elapsed since the system start"
  },
  "GetMicrosecondCount": {
    "prefix": "GetMicrosecondCount",
    "body": "GetMicrosecondCount()$0",
    "description": "<ulong> returns the number of microseconds that have elapsed since the start of MQL5-program."
  },
  "MessageBox": {
    "prefix": "MessageBox",
    "body": "MessageBox(${1:string  text}, ${2:caption=NULL}, ${3:int flags})$0",
    "description": "<int> creates and shows a message box and manages it.."
  },
  "PeriodSeconds": {
    "prefix": "PeriodSeconds",
    "body": "PeriodSeconds(${1:ENUM_TIMEFRAMES=PERIOD_CURRENT})$0",
    "description": "<int> number of seconds in a period."
  },
  "PlaySound": {
    "prefix": "PlaySound",
    "body": "PlaySound(${1:string  filename})$0",
    "description": "<bool> plays a sound file."
  },
  "Print": {
    "prefix": "Print",
    "body": "Print(${1:argument, ...})$0",
    "description": "<void> enters a message in the Expert Advisor log. Parameters can be of any type."
  },
  "PrintFormat": {
    "prefix": "PrintFormat",
    "body": "PrintFormat(${1:string format_string}, ${2: ...})$0",
    "description": "<void> formats and enters sets of symbols and values in the Expert Advisor log in accordance with a preset format."
  },
  "ResetLastError": {
    "prefix": "ResetLastError",
    "body": "ResetLastError()$0",
    "description": "<void> Sets the value of the predefined variable _LastError into zero."
  },
  "SendNotification": {
    "prefix": "SendNotification",
    "body": "SendNotification(${1:string text})$0",
    "description": "<bool> Sends push notifications to the mobile terminals, whose MetaQuotes IDs are specified in the \"Notifications\" tab.."
  },
  "SendMail": {
    "prefix": "SendMail",
    "body": "SendMail(${1:string subject}, ${2:string text})$0",
    "description": "<bool> Sends an email at the address specified in the settings window of the Email tab."
  },
  "Sleep": {
    "prefix": "Sleep",
    "body": "Sleep(${1:int milliseconds})$0",
    "description": "<void> The function suspends execution of the current Expert Advisor or script within a specified interval."
  },
  "TranslateKey": {
    "prefix": "TranslateKey",
    "body": "TranslateKey(${1:int key_code})$0",
    "description": "<short> Returns a Unicode character by a virtual key code considering the current input language and the status of control keys."
  },
  "WebRequest": {
    "prefix": "WebRequest",
    "body": "WebRequest(${1:see docs})$0",
    "description": "<int> sends an HTTP request to a specified server. The function has two versions:"
  },
  "ZeroMemory": {
    "prefix": "ZeroMemory",
    "body": "ZeroMemory(${1:void &variable})$0",
    "description": "<void> resets a variable passed to it by reference."
  },
  "ArraySize": {
    "prefix": "ArraySize",
    "body": "ArraySize(${1:const void& array[]})",
    "description": "<int> The function returns the number of elements of a selected array.."
  },
  "ArrayGetAsSeries": {
    "prefix": "ArrayGetAsSeries",
    "body": "ArrayGetAsSeries(${1:const void& array[]})$0",
    "description": "<bool> It checks direction of an array index.."
  },
  "ArraySetAsSeries": {
    "prefix": "ArraySetAsSeries",
    "body": "ArraySetAsSeries(${1:const void& array[]}, ${bool flag})$0",
    "description": "<bool> The function sets the AS_SERIES flag to a selected object of a dynamic array, and elements will be indexed like in timeseries."
  },
  "ArrayResize": {
    "prefix": "ArrayResize",
    "body": "ArrayResize(${1:void& array[]}, ${2:int new_size},${3:reserved_size=0})$0",
    "description": "<int> The function sets a new size for the first dimension"
  },
  "ArrayInitialize": {
    "prefix": "ArrayInitialize",
    "body": "ArrayInitialize(${1:T array[]}, ${2:T value})$0",
    "description": "<int> initializes a numeric array by a preset value."
  },
  "CharToString": {
    "prefix": "CharToString",
    "body": "CharToString(${1:uchar char_code})$0",
    "description": "<tostring> Converting a symbol code into a one-character string."
  },
  "CharArrayToString": {
    "prefix": "CharArrayToString",
    "body": "CharArrayToString(${1:uchar array[]}, ${2:int start}, ${3:int count=1}, ${4:uint code_page=CP_ACP})$0",
    "description": "<string> It copies and converts part of array of uchar type into a returned string.."
  },
  "ColorToString": {
    "prefix": "ColorToString",
    "body": "ColorToString(${1:color color}, ${2:bool show_color_name})$0",
    "description": "<string> It converts color value into string of R,G,B form."
  },
  "DoubleToString": {
    "prefix": "DoubleToString",
    "body": "DoubleToString(${1:double value}, ${2:int digits=8})$0",
    "description": "<string> Converting numeric value into text string."
  },
  "EnumToString": {
    "prefix": "EnumToString",
    "body": "EnumToString(${1:any_enum value})$0",
    "description": "<string> Converting an enumeration value of any type to a text form."
  },
  "IntegerToString": {
    "prefix": "IntegerToString",
    "body": "IntegerToString(${1:long number}, ${2:int str_len=8}, ${3:ushort fill_symbol=' '})$0",
    "description": "<string> Converting value of integer type into a string of a specified length and returns the obtained string."
  },
  "TimeToString": {
    "prefix": "TimeToString",
    "body": "TimeToString(${1:datetime value}, ${2:int mode=TIME_DATE|TIME_MINUTES})$0",
    "description": "<string> Converting a value containing time in seconds elapsed since 01.01.1970 into a string of yyyy.mm.dd hh:mi format."
  },
  "NormalizeDouble": {
    "prefix": "NormalizeDouble",
    "body": "NormalizeDouble(${1:double value}, ${2:int digits})$0",
    "description": "<double> Rounding floating point number to a specified accuracy."
  },
  "StringToCharArray": {
    "prefix": "StringToCharArray",
    "body": "StringToCharArray(${1:string text_string}, ${2:uchar& array[]}, ${3:int start=0}, ${4:int count=-1}, ${5:uint codepage=CP_ACP})$0",
    "description": "<int> Symbol-wise copies a string converted from Unicode to ANSI, to a selected place of array of uchar type. It returns the number of copied elements."
  },
  "StringToTime": {
    "prefix": "StringToTime",
    "body": "StringToTime(${1:string value})$0",
    "description": "<datetime> converts a string containing time or date in yyyy.mm.dd [hh:mi] format into datetime type."
  },
  "StringFormat": {
    "prefix": "StringFormat",
    "body": "StringFormat(${1:string format}, ${2:params...})$0",
    "description": "<string> The function formats obtained parameters and returns a string."
  },
  "MathAbs": {
    "prefix": "MathAbs",
    "body": "MathAbs(${1:double value})$0",
    "description": "<double> The function returns the absolute value (modulus) of the specified numeric value."
  },
  "MathPow": {
    "prefix": "MathPow",
    "body": "MathPow(${1:double base}, ${2:double exponent})$0",
    "description": "<double> The function returns the absolute value (modulus) of the specified numeric value."
  },
  "MathArcsin": {
    "prefix": "MathArcsin",
    "body": "MathArcsin(${1:double value})$0",
    "description": "<double> returns the arc sine of x within the range of -\u00cf\u20ac/2 to \u00cf\u20ac/2 radians."
  },
  "MathArccos": {
    "prefix": "MathArccos",
    "body": "MathArccos(${1:double value})$0",
    "description": "<double> returns the arccosine of x within the range 0 to \u00cf\u20ac in radians."
  },
  "MathCeil": {
    "prefix": "MathCeil",
    "body": "MathCeil(${1:double value})$0",
    "description": "<double> returns integer numeric value closest from above."
  },
  "MathFloor": {
    "prefix": "MathFloor",
    "body": "MathFloor(${1:double value})$0",
    "description": "<double> returns integer numeric value closest from below."
  },
  "MathLog": {
    "prefix": "MathLog",
    "body": "MathLog(${1:double value})$0",
    "description": "<double> returns a natural logarithm."
  },
  "MathLog10": {
    "prefix": "MathLog10",
    "body": "MathLog10(${1:double value})$0",
    "description": "<double> Returns the logarithm of a number by base 10."
  },
  "MathMax": {
    "prefix": "MathMax",
    "body": "MathMax(${1:double value1}, ${2:double value2})$0",
    "description": " <double> returns the maximal value of two values."
  },
  "MathMin": {
    "prefix": "MathMin",
    "body": "MathMin(${1:double value1}, ${2:double value2})$0",
    "description": "<double> returns the minimal value of two values."
  },
  "MathRand": {
    "prefix": "MathRand",
    "body": "MathRand()$0",
    "description": "<int> Returns a pseudorandom integer within the range of 0 to 32767."
  },
  "MathSrand": {
    "prefix": "MathSrand",
    "body": "MathSrand(${int seed})$0",
    "description": "<void> Sets the starting point for generating a series of pseudorandom integers."
  },
  "MathRound": {
    "prefix": "MathRound",
    "body": "MathRound(${1:double value})$0",
    "description": "<double> returns a value rounded off to the nearest integer of the specified numeric value."
  },
  "MathIsValidNumber": {
    "prefix": "MathIsValidNumber",
    "body": "MathIsValidNumber(${1:double value})$0",
    "description": "<bool> checks the correctness of a real number"
  },
  "MathSqrt": {
    "prefix": "MathSqrt",
    "body": "MathSqrt(${1:double value})$0",
    "description": "<double> Returns the square root of a number."
  },
  "TimeCurrentStruct": {
    "prefix": "TimeCurrentStruct",
    "body": "TimeCurrent(${1:MqlDateTime struct})$0",
    "description": "<datetime> MqlDateTime structure type variable has been passed as a parameter, it is filled accordingly"
  },
  "TimeCurrent": {
    "prefix": "TimeCurrent",
    "body": "TimeCurrent()$0",
    "description": "<datetime> Returns the last known server time"
  },
  "TimeTradeServer": {
    "prefix": "TimeTradeServer",
    "body": "TimeTradeServer()$0",
    "description": "<datetime> Returns the calculated current time of the trade server"
  },
  "TimeLocal": {
    "prefix": "TimeLocal",
    "body": "TimeLocal()$0",
    "description": "<datetime> Returns the local time of a computer"
  },
  "TimeLocal Struct": {
    "prefix": "TimeLocal Struct",
    "body": "TimeLocal(${1:MqlDateTime &struct})$0",
    "description": "<datetime> Returns the local time of a computer; fills struct"
  },
  "TimeGMT": {
    "prefix": "TimeGMT",
    "body": "TimeGMT()$0",
    "description": "<datetime> Returns the GMT, which is calculated taking into account the DST switch by the local time on the computer where the client terminal is running."
  },
  "TimeGMT Struct": {
    "prefix": "TimeGMT Struct",
    "body": "TimeGMT(${1:MqlDateTime &struct})$0",
    "description": "<datetime> Returns the GMT, which is calculated taking into account the DST switch by the local time on the computer where the client terminal is running."
  },
  "TimeDaylightSavings": {
    "prefix": "TimeDaylightSavings",
    "body": "TimeDaylightSavings()$0",
    "description": "<datetime> Returns correction for daylight saving time in seconds, if the switch to summer time has been made."
  },
  "TimeGMTOffset": {
    "prefix": "TimeGMTOffset",
    "body": "TimeGMTOffset()$0",
    "description": "<datetime> Returns the current difference between GMT time and the local computer time in seconds"
  },
  "TimeToStruct": {
    "prefix": "TimeToStruct",
    "body": "TimeToStruct(${1:datetime dt}, ${2:MqlDateTime &struct})$0",
    "description": "<bool> Converts a value of datetime type (number of seconds since 01.01.1970) into a structure variable MqlDateTime."
  },
  "StructToTime": {
    "prefix": "StructToTime",
    "body": "StructToTime(${1:MqlDateTime &struct})$0",
    "description": "<datetime> Converts a structure variable MqlDateTime into a value of datetime type and returns the resulting value."
  },
  "StringAdd": {
    "prefix": "StringAdd",
    "body": "StringAdd(${1:string& str_var}, ${2:string add_substring})$0",
    "description": "<bool> adds a substring to the end of a string."
  },
  "StringBufferLen": {
    "prefix": "StringBufferLen",
    "body": "StringBufferLen(${1:string string_var})$0",
    "description": "<int> returns the size of buffer allocated for the string."
  },
  "StringCompare": {
    "prefix": "StringCompare",
    "body": "StringCompare(${1:string str1}, ${2:string str2},${bool case_sensitive=true})$0",
    "description": "<int> compares two strings and returns the comparison result in form of an integer.Case sensitivity mode selection. If it is true, then A>a. If it is false, then A=a."
  },
  "StringFill": {
    "prefix": "StringFill",
    "body": "StringFill(${1:string& str_var}, ${2:ushort character})$0",
    "description": "<bool> It fills out a selected string by specified symbols"
  },
  "StringFind": {
    "prefix": "StringFind",
    "body": "StringFind(${1:string value}, ${2:string match_substring},${3:int start_pos=0})$0",
    "description": "<int> Search for a substring in a string."
  },
  "StringGetCharacter": {
    "prefix": "StringGetCharacter",
    "body": "StringGetCharacter(${1:string str_var}, ${2:int pos})$0",
    "description": "<ushort> returns value of a symbol, located in the specified position of a string."
  },
  "StringLen": {
    "prefix": "StringLen",
    "body": "StringLen(${1:string str_var})$0",
    "description": "<int> Returns the number of symbols in a string"
  },
  "StringReplace": {
    "prefix": "StringReplace",
    "body": "StringReplace(${1:string& str}, ${2:string find}, ${3:string replace})$0",
    "description": [
      "<int> replaces all the found substrings of a string by a set sequence of symbols.",
      "The function returns the number of replacements in case of success, otherwise -1. To get an error code call the GetLastError() function."
    ]
  },
  "StringSplit": {
    "prefix": "StringSplit",
    "body": "StringSplit(${1:string str}, ${2:ushort separator}, ${3:string &result[]})$0",
    "description": "<int> Gets substrings by a specified separator from the specified string, returns the number of substrings obtained."
  },
  "StringSubstr": {
    "prefix": "StringSubstr",
    "body": "StringSubstr(${1:string str}, ${2:int start_pos}, ${3:int length=-1)$0",
    "description": "<string> Extracts a substring from a text string starting from the specified position."
  },
  "StringToLower": {
    "prefix": "StringToLower",
    "body": "StringToLower(${1:string& str})$0",
    "description": "<bool> Transforms all symbols of a selected string into lowercase."
  },
  "StringToUpper": {
    "prefix": "StringToUpper",
    "body": "StringToUpper(${1:string& str})$0",
    "description": "<bool> Transforms all symbols of a selected string into capitals."
  },
  "StringTrimRight": {
    "prefix": "StringTrimRight",
    "body": "StringTrimRight(${1:string& str})$0",
    "description": "<int> The function cuts line feed characters, spaces and tabs in the right part of the string after the last meaningful symbol. The string is modified at place."
  },
  "StringTrimLeft": {
    "prefix": "StringTrimLeft",
    "body": "StringTrimLeft(${1:string& str})$0",
    "description": "<int> The function cuts line feed characters, spaces and tabs in the left part of the string till the first meaningful symbol. The string is modified at place."
  },
  "AccountInfoDouble": {
    "prefix": "AccountInfoDouble",
    "body": "AccountInfoDouble(${1:ENUM_ACOUNT_INFO_DOUBLE property_id})$0",
    "description": "<double> Returns the value of the corresponding account property."
  },
  "AccountInfoInteger": {
    "prefix": "AccountInfoInteger",
    "body": "AccountInfoInteger(${1:ENUM_ACOUNT_INFO_INTEGER  property_id})$0",
    "description": "<long> Returns the value of the corresponding account property."
  },
  "AccountInfoString": {
    "prefix": "AccountInfoString",
    "body": "AccountInfoString(${1:ENUM_ACOUNT_INFO_STRING  property_id})$0",
    "description": "<string> Returns the value of the corresponding account property."
  },
  "ACCOUNT_LOGIN": {
    "prefix": "ACCOUNT_LOGIN",
    "body": "ACCOUNT_LOGIN$0",
    "description": "<long> Account number"
  },
  "ACCOUNT_TRADE_MODE": {
    "prefix": "ACCOUNT_TRADE_MODE",
    "body": "ACCOUNT_TRADE_MODE$0",
    "description": "<ENUM_ACCOUNT_TRADE_MODE> Account trade mode"
  },
  "ACCOUNT_LEVERAGE": {
    "prefix": "ACCOUNT_LEVERAGE",
    "body": "ACCOUNT_LEVERAGE$0",
    "description": "<long> Account leverage"
  },
  "ACCOUNT_LIMIT_ORDERS": {
    "prefix": "ACCOUNT_LIMIT_ORDERS",
    "body": "ACCOUNT_LIMIT_ORDERS$0",
    "description": "<int> Maximum allowed number of active pending orders"
  },
  "ACCOUNT_MARGIN_SO_MODE": {
    "prefix": "ACCOUNT_MARGIN_SO_MODE",
    "body": "ACCOUNT_MARGIN_SO_MODE$0",
    "description": "<ENUM_ACCOUNT_STOPOUT_MODE> Mode for setting the minimal allowed margin"
  },
  "ACCOUNT_TRADE_ALLOWED": {
    "prefix": "ACCOUNT_TRADE_ALLOWED",
    "body": "ACCOUNT_TRADE_ALLOWED$0",
    "description": "<bool> Allowed trade for the current account"
  },
  "ACCOUNT_TRADE_EXPERT": {
    "prefix": "ACCOUNT_TRADE_EXPERT",
    "body": "ACCOUNT_TRADE_EXPERT$0",
    "description": "<bool> Allowed trade for an Expert Advisor"
  },
  "ACCOUNT_MARGIN_MODE": {
    "prefix": "ACCOUNT_MARGIN_MODE",
    "body": "ACCOUNT_MARGIN_MODE$0",
    "description": "<ENUM_ACCOUNT_MARGIN_MODE> Margin calculation mode"
  },
  "GetLastError": {
    "prefix": "GetLastError",
    "body": "GetLastError()$0",
    "description": "<int> Returns the contents of the system variable _LastError"
  },
  "IsStopped": {
    "prefix": "IsStopped",
    "body": "IsStopped()$0",
    "description": "<bool> Checks the forced shutdown of an mql5 program"
  },
  "UninitializeReason": {
    "prefix": "UninitializeReason",
    "body": "UninitializeReason()$0",
    "description": "<int> Returns the code of a reason for deinitialization."
  },
  "TerminalInfoInteger": {
    "prefix": "TerminalInfoInteger",
    "body": "TerminalInfoInteger(${1:int property_id})$0",
    "description": "<long> Returns the value of a corresponding property of the mql5 program environment"
  },
  "TerminalInfoDouble": {
    "prefix": "TerminalInfoDouble",
    "body": "TerminalInfoDouble(${1:int property_id})$0",
    "description": "<double> Returns the value of a corresponding property of the mql5 program environment"
  },
  "TerminalInfoString": {
    "prefix": "TerminalInfoString",
    "body": "TerminalInfoString(${1:int property_id})$0",
    "description": "<string> Returns the value of a corresponding property of the mql5 program environment"
  },
  "MQLInfoInteger": {
    "prefix": "MQLInfoInteger",
    "body": "MQLInfoInteger(${1:int property_id})$0",
    "description": "<int> Returns the value of a corresponding property of a running mql5 program."
  },
  "MQLInfoString": {
    "prefix": "MQLInfoString",
    "body": "MQLInfoString(${1:int property_id})$0",
    "description": "<string> Returns the value of a corresponding property of a running mql5 program."
  },
  "SymbolsTotal": {
    "prefix": "SymbolsTotal",
    "body": "SymbolsTotal(${1:bool selected})$0",
    "description": "<int> Returns the number of available (selected in Market Watch or all) symbols."
  },
  "SymbolName": {
    "prefix": "SymbolName",
    "body": "SymbolName(${1:int pos}, ${2:bool selected})$0",
    "description": "<string> returns the name of the symbol from the marketwatch window."
  },
  "SymbolSelect": {
    "prefix": "SymbolSelect",
    "body": "SymbolSelect(${1:string name}, ${2:bool select})$0",
    "description": "<bool> Selects a symbol in the Market Watch window or removes a symbol from the window."
  },
  "SymbolIsSynchronized": {
    "prefix": "SymbolIsSynchronized",
    "body": "SymbolIsSynchronized(${1:string name})$0",
    "description": "<bool> The function checks whether data of a selected symbol in the terminal are synchronized with data on the trade server."
  },
  "SymbolInfoTick": {
    "prefix": "SymbolInfoTick",
    "body": "SymbolInfoTick(${1:string name}, ${2:MqlTick& tick})$0",
    "description": "<bool> returns current prices of a specified symbol in a variable of the MqlTick type."
  },
  "MarketBookAdd": {
    "prefix": "MarketBookAdd",
    "body": "MarketBookAdd(${1:string name})$0",
    "description": "<bool> Provides opening of Depth of Market for a selected symbol, and subscribes for receiving notifications of the DOM changes."
  },
  "MarketBookRelease": {
    "prefix": "MarketBookRelease",
    "body": "MarketBookRelease(${1:string name})$0",
    "description": "<bool> Provides closing of Depth of Market for a selected symbol, and cancels the subscription for receiving notifications of the DOM changes."
  },
  "MarketBookGet": {
    "prefix": "MarketBookGet",
    "body": "MarketBookGet(${1:string name}, ${2:MqlBookInfo&  book[]})$0",
    "description": "<bool> Returns a structure array MqlBookInfo containing records of the Depth of Market of a specified symbol."
  },
  "SymbolInfoInteger": {
    "prefix": "SymbolInfoInteger",
    "body": "SymbolInfoInteger(${1:string name}, ${2:ENUM_SYMBOL_INFO_STRING prop_id})$0",
    "description": "<long> Returns the corresponding property of a specified symbol."
  },
  "SymbolInfoString": {
    "prefix": "SymbolInfoString",
    "body": "SymbolInfoString(${1:string name}, ${2:ENUM_SYMBOL_INFO_INTEGER prop_id})$0",
    "description": "<string> Returns the corresponding property of a specified symbol."
  },
  "SymbolInfoDouble": {
    "prefix": "SymbolInfoDouble",
    "body": "SymbolInfoDouble(${1:string name}, ${2:ENUM_SYMBOL_INFO_DOUBLE prop_id})$0",
    "description": "<double> Returns the corresponding property of a specified symbol."
  },
  "SYMBOL_BID": {
    "prefix": "SYMBOL_BID",
    "body": "SYMBOL_BID",
    "description": "<double> Bid"
  },
  "SYMBOL_ASK": {
    "prefix": "SYMBOL_ASK",
    "body": "SYMBOL_ASK",
    "description": "<double> Ask"
  },
  "SYMBOL_POINT": {
    "prefix": "SYMBOL_POINT",
    "body": "SYMBOL_POINT",
    "description": "<double> Symbol point value."
  },
  "SYMBOL_TRADE_TICK_VALUE": {
    "prefix": "SYMBOL_TRADE_TICK_VALUE",
    "body": "SYMBOL_TRADE_TICK_VALUE",
    "description": "<double> Value of one tick"
  },
  "SYMBOL_TRADE_TICK_SIZE": {
    "prefix": "SYMBOL_TRADE_TICK_SIZE",
    "body": "SYMBOL_TRADE_TICK_SIZE",
    "description": "<double> Minimal price change"
  },
  "SYMBOL_VOLUME_MIN": {
    "prefix": "SYMBOL_VOLUME_MIN",
    "body": "SYMBOL_VOLUME_MIN",
    "description": "<double> Minimal volume for a deal"
  },
  "SYMBOL_VOLUME_MAX": {
    "prefix": "SYMBOL_VOLUME_MAX",
    "body": "SYMBOL_VOLUME_MAX",
    "description": "<double> Maximum volume for a deal."
  },
  "SYMBOL_VOLUME_STEP": {
    "prefix": "SYMBOL_VOLUME_STEP",
    "body": "SYMBOL_VOLUME_STEP",
    "description": "<double> Minimal volume change step for deal execution"
  },
  "SYMBOL_MARGIN_INITIAL": {
    "prefix": "SYMBOL_MARGIN_INITIAL",
    "body": "SYMBOL_MARGIN_INITIAL",
    "description": "<double> Initial margin means the amount in the margin currency required for opening an order with the volume of one lot. It is used for checking a client's assets when he or she enters the market."
  },
  "SYMBOL_CURRENCY_BASE": {
    "prefix": "SYMBOL_CURRENCY_BASE",
    "body": "SYMBOL_CURRENCY_BASE",
    "description": "<string> Basic currency of a symbol."
  },
  "SYMBOL_CURRENCY_PROFIT": {
    "prefix": "SYMBOL_CURRENCY_PROFIT",
    "body": "SYMBOL_CURRENCY_PROFIT",
    "description": "<string> Profit/counter currency of a symbol."
  },
  "SYMBOL_CURRENCY_MARGIN": {
    "prefix": "SYMBOL_CURRENCY_MARGIN",
    "body": "SYMBOL_CURRENCY_MARGIN",
    "description": "<string> Margin Currency"
  },
  "SYMBOL_DESCRIPTION": {
    "prefix": "SYMBOL_DESCRIPTION",
    "body": "SYMBOL_DESCRIPTION",
    "description": "<string> Symbol Description."
  },
  "SYMBOL_SELECT": {
    "prefix": "SYMBOL_SELECT",
    "body": "SYMBOL_SELECT",
    "description": "<bool> Symbol is selected in Market Watch. Some symbols can be hidden in Market Watch, but still they are considered as selected."
  },
  "SYMBOL_DIGITS": {
    "prefix": "SYMBOL_DIGITS",
    "body": "SYMBOL_DIGITS",
    "description": "<int> Number of decimal places in the symbol quote."
  },
  "SYMBOL_TIME": {
    "prefix": "SYMBOL_TIME",
    "body": "SYMBOL_TIME",
    "description": "<datetime> Time of the last quote."
  },
  "SeriesInfoInteger": {
    "prefix": "SeriesInfoInteger",
    "body": "SeriesInfoInteger(${1:string name}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:ENUM_SERIES_INFO_INTEGER prop_id})$0",
    "description": "<long> Returns information about the state of historical data."
  },
  "SERIES_BARS_COUNT": {
    "prefix": "SERIES_BARS_COUNT",
    "body": "SERIES_BARS_COUNT",
    "description": "<long> Bars count for the symbol-period for the current moment"
  },
  "SERIES_FIRSTDATE": {
    "prefix": "SERIES_FIRSTDATE",
    "body": "SERIES_FIRSTDATE",
    "description": "<datetime> The very first date for the symbol-period for the current moment"
  },
  "SERIES_LASTBAR_DATE": {
    "prefix": "SERIES_LASTBAR_DATE",
    "body": "SERIES_LASTBAR_DATE",
    "description": "<datetime> Open time of the last bar of the symbol-period"
  },
  "SERIES_SERVER_FIRSTDATE": {
    "prefix": "SERIES_SERVER_FIRSTDATE",
    "body": "SERIES_SERVER_FIRSTDATE",
    "description": "<datetime> The very first date in the history of the symbol on the server regardless of the timeframe"
  },
  "Bars_From_To": {
    "prefix": "Bars_From_To",
    "body": "Bars(${1:string name}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:datetime start_time}, ${4:datetime stop_time})$0",
    "description": "<int> Returns the number of bars count in the history for a specified symbol and period."
  },
  "Bars": {
    "prefix": "Bars",
    "body": "Bars(${1:string name}, ${2:ENUM_TIMEFRAMES timeframe})$0",
    "description": "<int> Returns the number of bars count in the history for a specified symbol and period."
  },
  "BarsCalculated": {
    "prefix": "BarsCalculated",
    "body": "BarsCalculated(${1:int ind_handle})$0",
    "description": "<int> Returns the number of calculated data for the specified indicator"
  },
  "IndicatorRelease": {
    "prefix": "IndicatorRelease",
    "body": "IndicatorRelease(${1:int ind_handle})$0",
    "description": "<bool> removes an indicator handle and releases the calculation block of the indicator, if it's not used by anyone else."
  },
  "CopyTicks": {
    "prefix": "CopyTicks",
    "body": "CopyTicks(${1:string symbol}, ${2:MqlTick& tickarray[]}, ${3:uint flags=COPY_TICKS_ALL}, ${4:ulong from=0}, ${5:uint count=0})$0",
    "description": "<int> receives ticks in the MqlTick format into ticks_array."
  },
  "CopyBuffer": {
    "prefix": "CopyBuffer",
    "body": "CopyBuffer(${1:int handle}, ${2:int buffer_number}, ${3:int start_pos|datetime start_time}, ${4:int count|datetime stop_time}, ${5:double buffer[]})$0",
    "description": "<int> Gets data of a specified buffer of a certain indicator in the necessary quantity."
  },
  "CopyRates": {
    "prefix": "CopyRates",
    "body": "CopyRates(${1:string symbol}, ${2:ENUM_TIMEFRAMES timeframe}, ${3:int start_pos|datetime start_time}, ${4:int count|datetime stop_time}, ${5:MqlRates rates_array[]})$0",
    "description": "<int> Gets history data of MqlRates structure of a specified symbol-period in specified quantity into the rates_array array. The elements ordering of the copied data is from present to the past, i.e., starting position of 0 means the current bar."
  },
  "EventSetMillisecondTimer": {
    "prefix": "EventSetMillisecondTimer",
    "body": "EventSetMillisecondTimer(${1:int milliseconds})$0",
    "description": "<bool> indicates to the client terminal that timer events should be generated at intervals less than one second for this Expert Advisor or indicator."
  },
  "EventSetTimer": {
    "prefix": "EventSetTimer",
    "body": "EventSetTimer(${1:int seconds})$0",
    "description": "<bool> indicates to the client terminal, that for this indicator or Expert Advisor, events from the timer must be generated with the specified periodicity."
  },
  "EventKillTimer": {
    "prefix": "EventKillTimer",
    "body": "EventKillTimer()$0",
    "description": "<bool> Specifies the client terminal that is necessary to stop the generation of events from Timer."
  },
  "EventChartCustom": {
    "prefix": "EventChartCustom",
    "body": "EventChartCustom()$0",
    "description": "<bool> The function generates a custom event for the specified chart."
  },
  "OrderClose": {
    "prefix": "OrderClose",
    "body": "OrderClose(${1:int ticket}, ${2:double lots}, ${3:double price}, ${4:int slippage}, ${5:color arrow_color=clrNone})$0",
    "description": "<bool> Closes opened order."
  },
  "OrderCloseBy": {
    "prefix": "OrderCloseBy",
    "body": "OrderCloseBy(${1:int ticket}, ${2:int opposite}, ${3:color arrow_color=clrNone})$0",
    "description": "<bool> Closes an opened order by another opposite opened order."
  },
  "OrderClosePrice": {
    "prefix": "OrderClosePrice",
    "body": "OrderClosePrice()$0",
    "description": "<double> Returns close price of the currently selected order. If the order is live this will return the price of which it is to be closed."
  },
  "OrderCloseTime": {
    "prefix": "OrderCloseTime",
    "body": "OrderCloseTime(${1:int ticket}, ${2:double lots}, ${3:double price}, ${4:int slippage}, ${5:color arrow_color})$0",
    "description": "<datetime> Returns close time of the currently selected order."
  },
  "OrderComment": {
    "prefix": "OrderComment",
    "body": "OrderComment()$0",
    "description": "<string> Returns comment of the currently selected order."
  },
  "OrderCommission": {
    "prefix": "OrderCommission",
    "body": "OrderCommission()$0",
    "description": "<double> Returns calculated commission of the currently selected order."
  },
  "OrderDelete": {
    "prefix": "OrderDelete",
    "body": "OrderDelete(${1:int ticket}, ${5:color arrow_color=clrNone})$0",
    "description": "<bool> Deletes previously opened pending order."
  },
  "OrderExpiration": {
    "prefix": "OrderExpiration",
    "body": "OrderExpiration()$0",
    "description": "<datetime> Returns expiration date of the selected pending order."
  },
  "OrderLots": {
    "prefix": "OrderLots",
    "body": "OrderLots()$0",
    "description": "<double> Returns amount of lots of the selected order."
  },
  "OrderMagicNumber": {
    "prefix": "OrderMagicNumber",
    "body": "OrderMagicNumber()$0",
    "description": "<int> Returns an identifying (magic) number of the currently selected order."
  },
  "OrderModify": {
    "prefix": "OrderModify",
    "body": "OrderModify(${1:int ticket}, ${2:double price}, ${3:double stoploss}, ${4:double takeprofit}, ${5:datetime expiration}, ${6:color arrow_color=clrNone})$0",
    "description": "<bool> Modification of characteristics of the previously opened or pending orders."
  },
  "OrderOpenPrice": {
    "prefix": "OrderOpenPrice",
    "body": "OrderOpenPrice()$0",
    "description": "<double> Returns open price of the currently selected order."
  },
  "OrderOpenTime": {
    "prefix": "OrderOpenTime",
    "body": "OrderOpenTime()$0",
    "description": "<datetime> Returns open time of the currently selected order."
  },
  "OrderPrint": {
    "prefix": "OrderPrint",
    "body": "OrderPrint()$0",
    "description": "<void> Prints information about the selected order in the log."
  },
  "OrderProfit": {
    "prefix": "OrderProfit",
    "body": "OrderProfit()$0",
    "description": "<double> Returns profit of the currently selected order."
  },
  "OrderSelect": {
    "prefix": "OrderSelect",
    "body": "OrderSelect(${1:int position|int ticket}, ${2:SELECT_BY_POS|SELECT_BY_TICKET}, ${3:int pool=MODE_TRADES|MODE_HISTORY})$0",
    "description": "<bool> The function selects an order for further processing."
  },
  "OrderSend": {
    "prefix": "OrderSend",
    "body": "OrderSend(${1:string symbol}, ${2:int cmd}, ${3:double volume}, ${4:double price}, ${5:int slippage}, ${6:double stoploss}, ${7:double takeprofit}, ${8:string comment=NULL}, ${9:int magic=0}, ${10:datetime expiration=0}, ${11:color arrow_color=clrNONE})$0",
    "description": "<int> The main function used to open market or place a pending order. Returns number of the ticket assigned to the order by the trade server or -1 if it fails."
  },
  "OrdersHistoryTotal": {
    "prefix": "OrdersHistoryTotal",
    "body": "OrdersHistoryTotal)$0",
    "description": "<int> Returns the number of closed orders in the account history loaded into the terminal. "
  },
  "OrderStopLoss": {
    "prefix": "OrderStopLoss",
    "body": "OrderStopLoss(${1:int ticket}, ${2:double lots}, ${3:double price}, ${4:int slippage}, ${5:color arrow_color})$0",
    "description": "<double> Returns stoploss of the currently selected order."
  },
  "OrdersTotal": {
    "prefix": "OrdersTotal",
    "body": "OrdersTotal()$0",
    "description": "<int> Returns the number of market and pending orders."
  },
  "OrderSwap": {
    "prefix": "OrderSwap",
    "body": "OrderSwap()$0",
    "description": "<double> Returns swap value of the currently selected order."
  },
  "OrderTakeProfit": {
    "prefix": "OrderTakeProfit",
    "body": "OrderTakeProfit()$0",
    "description": "<datetime> Returns take profit value of the currently selected order."
  },
  "OrderSymbol": {
    "prefix": "OrderSymbol",
    "body": "OrderSymbol()$0",
    "description": "<string> Returns symbol of the currently selected order."
  },
  "OrderTicket": {
    "prefix": "OrderTicket",
    "body": "OrderTicket()$0",
    "description": "<int> Returns order ticket number of the currently selected order."
  },
  "OrderType": {
    "prefix": "OrderType",
    "body": "OrderType()$0",
    "description": "<int> Returns order operation type of the currently selected order. OP_BUY=buy-order, OP_SELL=sell-order, OP_BUYLIMIT=buy-limit, OP_BUYSTOP=buy-stop, OP_SELLLIMIT=sell-limit, OP_SELLSTOP=sell-stop."
  },
  "iATR": {
    "prefix": "iATR",
    "body": "iATR(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:int shift})$0",
    "description": "<double> Calculates the Average True Range indicator and returns its value"
  },
  "iADX": {
    "prefix": "iADX",
    "body": "iADX(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:int applied_price}, ${5:int mode}, ${6:int shift})$0",
    "description": "<double> Calculates the Average Directional Movement Index indicator and returns its value."
  },
  "iBands": {
    "prefix": "iBands",
    "body": "iBands(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:double deviation}, ${5:int bands_shift}, ${6:int applied_price}, ${7:int mode}, ${8:int shift})$0",
    "description": "<double> Calculates the Bollinger Bands\u00c2\u00ae indicator and returns its value."
  },
  "iCustom": {
    "prefix": "iCustom",
    "body": "iCustom(${1:string symbol}, ${2:int timeframe}, ${3:string name}, ${4: ... }, ${5:int buffer_index}, ${6:int shift})$0",
    "description": "<double> Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file) and be in the terminal_directory\\MQL4\\Indicators\\ directory."
  },
  "iMA": {
    "prefix": "iMA",
    "body": "iMA(${1:string symbol}, ${2:int timeframe}, ${3:int ma_period}, ${4:int ma_shift}, ${5:int ma_method}, ${6:int applied_price}, ${7:int shift})$0",
    "description": "<double> Calculates the Moving Average indicator and returns its value. eg. iMA(NULL,0,13,8,MODE_SMMA,PRICE_MEDIAN,i);"
  },
  "iRSI": {
    "prefix": "iRSI",
    "body": "iRSI(${1:string symbol}, ${2:int timeframe}, ${3:int period}, ${4:int applied_price}, ${5:int shift})$0",
    "description": "<double> Calculates the RSI indicator and returns its value."
  },
  "iStochastic": {
    "prefix": "iStochastic",
    "body": "iStochastic(${1:string symbol}, ${2:int timeframe}, ${3:int Kperiod}, ${4:int Dperiod}, ${5:int slowing}, ${5:int method}, ${6:int price_field}, ${7:int mode}, ${8:int shift})$0",
    "description": "<double> Calculates the Moving Average indicator and returns its value. eg. iMA(NULL,0,13,8,MODE_SMMA,PRICE_MEDIAN,i);"
  },
  "ENUM_CHART_EVENT": {
    "prefix": "ENUM_CHART_EVENT",
    "body": "ENUM_CHART_EVENT",
    "description": "There are 9 types of events that can be processed using the predefined function OnChartEvent(). "
  },
  "CHARTEVENT_KEYDOWN": {
    "prefix": "CHARTEVENT_KEYDOWN",
    "body": "CHARTEVENT_KEYDOWN",
    "description": "Keystrokes"
  },
  "CHARTEVENT_MOUSE_MOVE": {
    "prefix": "CHARTEVENT_MOUSE_MOVE",
    "body": "CHARTEVENT_MOUSE_MOVE",
    "description": "Mouse move, mouse clicks (if CHART_EVENT_MOUSE_MOVE=true is set for the chart)"
  },
  "CHARTEVENT_OBJECT_CREATE": {
    "prefix": "CHARTEVENT_OBJECT_CREATE",
    "body": "CHARTEVENT_OBJECT_CREATE",
    "description": "Graphical object created (if CHART_EVENT_OBJECT_CREATE=true is set for the chart)"
  },
  "CHARTEVENT_OBJECT_DELETE": {
    "prefix": "CHARTEVENT_OBJECT_DELETE",
    "body": "CHARTEVENT_OBJECT_DELETE",
    "description": "Graphical object deleted (if CHART_EVENT_OBJECT_DELETE=true is set for the chart)"
  },
  "CHARTEVENT_OBJECT_CHANGE": {
    "prefix": "CHARTEVENT_OBJECT_CHANGE",
    "body": "CHARTEVENT_OBJECT_CHANGE",
    "description": "Graphical object property changed via the properties dialog"
  },
  "CHARTEVENT_CLICK": {
    "prefix": "CHARTEVENT_CLICK",
    "body": "CHARTEVENT_CLICK",
    "description": "Clicking on a graphical object"
  },
  "CHARTEVENT_OBJECT_DRAG": {
    "prefix": "CHARTEVENT_OBJECT_DRAG",
    "body": "CHARTEVENT_OBJECT_DRAG",
    "description": "Drag and drop of a graphical object"
  },
  "CHARTEVENT_OBJECT_ENDEDIT": {
    "prefix": "CHARTEVENT_OBJECT_ENDEDIT",
    "body": "CHARTEVENT_OBJECT_ENDEDIT",
    "description": "End of text editing in the graphical object Edit"
  },
  "CHARTEVENT_CHART_CHANGE": {
    "prefix": "CHARTEVENT_CHART_CHANGE",
    "body": "CHARTEVENT_CHART_CHANGE",
    "description": "Change of the chart size or modification of chart properties through the Properties dialog"
  },
  "CHARTEVENT_CUSTOM": {
    "prefix": "CHARTEVENT_CUSTOM",
    "body": "CHARTEVENT_CUSTOM",
    "description": "Initial number of an event from a range of custom events"
  },
  "CHARTEVENT_CUSTOM_LAST": {
    "prefix": "CHARTEVENT_CUSTOM_LAST",
    "body": "CHARTEVENT_CUSTOM_LAST",
    "description": "The final number of an event from a range of custom events"
  },
  "for forward": {
    "prefix": "for forward",
    "body": ["for(int i=0;i < ${1:int max_iter};i++)", "{", "   $0", "}"],
    "description": "mql4 orderselect loop"
  },
  "for backward": {
    "prefix": "for backward",
    "body": ["for(int i=${1:int max_iter} - 1;i >= 0 ;i--)", "{", "   $0", "}"],
    "description": "mql4 orderselect loop"
  },
  "for OrdersTotal": {
    "prefix": "for OrdersTotal",
    "body": [
      "for(int i=OrdersTotal()-1;i>=0;i--)",
      "{",
      "   if(OrderSelect(i,SELECT_BY_POS) && OrderSymbol() == _Symbol ${1: other conditions})",
      "   {",
      "      $0",
      "   }",
      "}"
    ],
    "description": "mql4 orderselect loop"
  },
  "for OrdersHistoryTotal": {
    "prefix": "for OrdersHistoryTotal",
    "body": [
      "for(int i=OrdersHistoryTotal()-1;i>=0;i--)",
      "{",
      "   if(OrderSelect(i,SELECT_BY_POS,MODE_HISTORY) && OrderSymbol() == _Symbol ${1: other conditions})",
      "   {",
      "      $0",
      "   }",
      "}"
    ],
    "description": "mql4 orderselect loop"
  },
  "OnStart": {
    "prefix": "OnStart",
    "body": ["void OnStart()", "{", "   $0", "}"],
    "description": "Script entry point"
  },
  "Script_Template": {
    "prefix": "Script_Template",
    "body": [
      "//+------------------------------------------------------------------+",
      "//| ${1:file_name.mq4}.mq4",
      "//| Copyright 2017, ${2:Author Name}",
      "//| ${3:Link}",
      "//+------------------------------------------------------------------+",
      "#property copyright \"Copyright 2017, ${2:Author Name}\"",
      "#property link      \"${3:Link}\"",
      "#property version   \"1.00\"",
      "#property strict",
      "$4",
      " ",
      " ",
      "void OnStart()",
      "{",
      "   $5",
      "}",
      "$0"
    ]
  },
  "Expert_Template": {
    "prefix": "Expert_Template",
    "body": [
      "//+------------------------------------------------------------------+",
      "//| ${1:file_name.mq4}.mq4",
      "//| Copyright 2017, ${2:Author Name}",
      "//| ${3:Link}",
      "//+------------------------------------------------------------------+",
      "#property copyright \"Copyright 2017, ${2:Author Name}\"",
      "#property link      \"${3:Link}\"",
      "#property version   \"1.00\"",
      "#property strict",
      "$4",
      " ",
      " ",
      "//+------------------------------------------------------------------+",
      "//| Expert initialization function                                   |",
      "//+------------------------------------------------------------------+",
      "int OnInit()",
      "{",
      "   EventSetTimer(60);",
      "   ",
      "   return(INIT_SUCCEEDED);",
      "}",
      "//+------------------------------------------------------------------+",
      "//| Expert deinitialization function                                 |",
      "//+------------------------------------------------------------------+",
      ",void OnDeinit(const int reason)",
      "{",
      " EventKillTimer();",
      "    ",
      "}",
      "//+------------------------------------------------------------------+",
      "//| Expert tick function                                             |",
      "//+------------------------------------------------------------------+",
      "void OnTick()",
      "{",
      "   ",
      "}",
      "//+------------------------------------------------------------------+",
      "//| Timer function                                                   |",
      "//+------------------------------------------------------------------+",
      "void OnTimer()",
      "{",
      "  ",
      "}",
      "//+------------------------------------------------------------------+",
      "//| ChartEvent function                                              |",
      "//+------------------------------------------------------------------+",
      "void OnChartEvent(const int id,",
      "                const long &lparam,",
      "                const double &dparam,",
      "                const string &sparam)",
      "{",
      " ",
      "}",
      "//+------------------------------------------------------------------+"
    ],
    "description": "expert advisor template"
  },
  "Function_Header": {
    "prefix": "Function_Header",
    "body": [
      "//+------------------------------------------------------------------+",
      "//| ${1:type} ${2:FuntionName} : ${3:description}",
      "//+------------------------------------------------------------------+",
      "${1:type} ${2:FunctionName}($4)",
      "{",
      "   $0",
      "}"
    ]
  }
}
